#! /usr/bin/env python


import thermotar as th
import matplotlib.pyplot as plt

import argparse
import warnings
from collections import defaultdict
parser = argparse.ArgumentParser(description='Plot the profile and associated ')


parser.add_argument("-e","--eos",default=False,action='store_true', help='Plot the equation of states')
parser.add_argument("-v","--verbose",default=False, action="store_true",help='Increase Verbosity')
parser.add_argument("-s","--save",default=False, action="store_true",help='Save the files?') 

parser.add_argument("chunk_file",help='LAMMPS chunk file, output of fix ave/chunk',action='store')
# making the properties option positional, with zero or more
parser.add_argument("properties",default=['density','temp'],action='extend',nargs="*",help='Properties to plot. By default this is temperature and mass/number density')

args = parser.parse_args()


# load the 
chunk = th.Chunk.create_chunk(args.chunk_file,style='lmp')

properties = set(chunk.data.columns)

plot_properties = list(set(args.properties))
print(plot_properties)
if "density" in plot_properties:
    if "density_mass" in properties:
        plot_properties[plot_properties.index("density")] = "density_mass"
    elif "density_number" in properties:
        plot_properties[plot_properties.index("density")] = "density_number"
    else:
        raise AttributeError('No density property found!')


labels = defaultdict(lambda : 'Unlabelled!', {'temp':'$T$/K', 'Coord1':'$z/ \mathrm{\AA}$','density_mass':r'$\rho/\mathrm{g\ cm^{-3}}$','density_number':r'$\rho_N/\mathrm{\AA^{-3}}$'})

fig,axs = plt.subplots(len(plot_properties),sharex=True,tight_layout=True)

for i,prop in enumerate(plot_properties):
    ax=axs[i]
    try:
        ax.plot(chunk.data['Coord1'],chunk.data[prop],label='prop',c='k')
        ax.set_ylabel(labels[prop])
    except IndexError:
        warnings.warn(f'Property {prop} not in file!')
ax.set_xlabel(labels['Coord1'])
if args.save:
    plt.savefig('profiles.png')

plt.show()

if args.eos:
    try:
        plt.plot(chunk.data['density_mass'],chunk.data['temp'],c='k')
        plt.xlabel(labels['density_mass'])
        plt.ylabel(labels['temp'])
        plt.show()
    except IndexError:
        raise IndexError("Properties were not found!!!")