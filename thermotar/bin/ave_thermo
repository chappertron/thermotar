#! /usr/bin/env python


#### Script to load thermo log file(s) and record the averages. Can output to a csv if needed


### Assues that all properties will be averaged.

### By default loads the last 




# 
import argparse
from os import name
from pathlib import Path
import re
from typing import Dict

from numpy import select

# Data handling
import thermotar as th
from thermotar.utils import bash_like
import pandas as pd


def setup_parser():
    parser = argparse.ArgumentParser(description='Calculate average thermodynamic properties from lammps thermo log file')

    parser.add_argument("thermo_file",help='Log file name to load, supports globbing',action='store')

    parser.add_argument('-o','--out_file',help='Output csv file to save aveaged properties to',default=None)

    parser.add_argument('-v','--verbose',help='make verbose',action='store_true',default=False)

    return parser 


def load_thermos(fname,last=True,split_thermos=False,verbose=False)-> dict:
    thermo_list = []
    keys = []

    path_re = re.compile(bash_like.glob_to_re_group(fname))
    
    path_names = Path('.').glob(fname)
    
    for i,path in enumerate(path_names):
        if verbose: 
            print(f"Loading {path}")
        try:
            thermo_list.append(th.create_thermos(path,last))
        except IndexError:
            print(f'{path} could not be loaded ðŸ˜­ðŸ˜­ðŸ˜±')
            continue
        #if verbose: print('Did the next work??? ')
        try:
            key = path_re.match(str(path)).groups()
            keys.append(key)
        except AttributeError:
            keys.append(i)
            pass

    
    #if verbose: print('key and df lens',len(keys),len(thermo_list))
    
    if len(keys) != len(thermo_list):
        raise IndexError('Must have the same number of keys as data sets!!! Something has gone wrong in the code!!')
    
    if len(keys)>1:
        thermo_dict = dict(zip(keys,thermo_list))   
    else:
        thermo_dict = {i:therm for i,therm in enumerate(thermo_list)}

    return thermo_dict


def calculate_averages(thermo_dict:dict):
    '''
        TODO: add options for choosing which range of steps to average over.
        TODO: Add options for which levels to average over..
    
    '''


    concatted = pd.concat({key:therm.data for key,therm in thermo_dict.items()}).sort_index()
    

    
    n_levels = len(concatted.index.levels)

    non_ave_levels = tuple(range(n_levels-1))## Assuming only average over the last level, i.e. the time series.


    means = concatted.mean(level=non_ave_levels)
    std = concatted.std(level=non_ave_levels).rename(columns=lambda x : x+'_err')

    stacked_df = pd.concat([means,std],axis=1)


    return stacked_df
    


def main():
    parser = setup_parser()

    args = parser.parse_args()
    
    thermo_dict = load_thermos(args.thermo_file,verbose=args.verbose)
    if args.verbose: print(thermo_dict)
    if args.verbose: [print(str(i)+'\n',therm.data.head()) for i,therm in thermo_dict.items()]


    df = calculate_averages(thermo_dict)

    if args.verbose:
        print('Averaged Properties:')
        print(df)

    if args.out_file:
        df.to_csv(str(args.out_file))


    pass







if __name__=='__main__':
    main()


