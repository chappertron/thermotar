#! /usr/bin/env python

from argparse import ArgumentParser, Namespace
from pathlib import Path
from typing import Optional, Sequence, List, Dict
import pandas as pd
import thermotar as th
from thermotar import Thermo
# from plus_minus import plus_minus


def argument_parser(args: Optional[Sequence[str]] = None) -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("files", nargs="+", help="Files to be analysed", type=Path)
    parser.add_argument("--n_blocks", default=10, type=int)
    parser.add_argument("--last", default=False, action="store_true")

    # TODO: All the negatives are quite confusing.
    parser.add_argument("--no-drift", default=False, action="store_true")
    parser.add_argument("--no-aves", default=False, action="store_true")

    parser.add_argument("--csv", default=False, action="store_true",help="Output the results as a csv for piping.")

    parsed = parser.parse_args(args)

    return parsed


def main():
    args = argument_parser()
    files: Sequence[Path] = args.files

    thermos = {
        str(file): th.create_thermos(file, join=False, last=False) for file in files
    }

    if args.last:
        thermos = {key: [val[-1]] for key, val in thermos.items()}

    # Filter out non-lists of thermos, which should not be there:
    thermos: Dict[str, List[Thermo]] = {
        key: val for key, val in thermos.items() if isinstance(val, list)
    }

    for file, thermo_list in thermos.items():
        print(f"File: {file}")
        for i, thermo in enumerate(thermo_list):
            print(f"Run {i}")
            # print(thermo.block_aves(n_blocks=args.n_blocks))
            results: pd.DataFrame = pd.DataFrame()
            if not args.no_aves:
                data = thermo.estimate_error(n_blocks=args.n_blocks)
                results = pd.concat([results,data],axis=1)
            if not args.no_drift:
                drift_df = thermo.estimate_drift().transpose()
                drift_df["percentage_drift"] = drift_df["frac_drift"] * 100
                # TODO: Make this printing prettier
                results = pd.concat([results,drift_df],axis=1)

            if args.csv:
                print(results.to_csv())
            else:
                print(results)


if __name__ == "__main__":
    main()
